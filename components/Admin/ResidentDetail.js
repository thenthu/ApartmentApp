import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, ActivityIndicator, ScrollView } from "react-native";
import { Avatar, Card } from "react-native-paper";
import { authApis, endpoints } from "../../configs/Apis";
import AsyncStorage from "@react-native-async-storage/async-storage";

const quanHeVietHoa = {
  "owner": "Ch·ªß h·ªô",
  "wife/husband": "V·ª£/Ch·ªìng",
  "child": "Con c√°i",
  "other": "Kh√°c"
};

const ResidentDetails = ({ route }) => {
  const { residentId } = route.params;
  const [resident, setResident] = useState(null);
  const [loading, setLoading] = useState(true);
  const [account, setAccount] = useState(null);
  const [error, setError] = useState(null);
  const [parkingCard, setParkingCard] = useState(null);

  const loadResidentDetails = async () => {
    try {
      const token = await AsyncStorage.getItem("token");
      const res = await authApis(token).get(`${endpoints["residents"]}${residentId}/`);
      setResident(res.data);

      try {
        const cardRes = await authApis(token).get(`${endpoints["residents"]}${residentId}/parkingcard/`);
        setParkingCard(cardRes.data);
      } catch (cardErr) {
        if (cardErr.response?.status === 500) {
          setParkingCard(null);
        } else {
          console.error("L·ªói khi l·∫•y th·∫ª xe:", cardErr);
        }
      }
            
    //   const userRes = await authApis(token).get(`${endpoints["users"]}`);
    //   const user = userRes.data.find(u => u.resident && u.resident.id === residentId);

    //   if (user) {
    //     setAccount(user);
    //   }

    } catch (err) {
      console.error("L·ªói khi t·∫£i th√¥ng tin c∆∞ d√¢n:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c∆∞ d√¢n. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadResidentDetails();
  }, []);

  if (loading) {
    return <Text style={{ padding: 20 }}>ƒêang t·∫£i d·ªØ li·ªáu...</Text>;
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Card style={styles.card}>
        <Card.Title
          title={resident.name}
          subtitle={`üë§ Quan h·ªá: ${quanHeVietHoa[resident.relationship_to_head] || "Kh√¥ng r√µ"}`}
          left={(props) => <Avatar.Text {...props} label={resident.name[0].toUpperCase()} />}
        />
        <Card.Content>
          <Text>üè† Ph√≤ng: {resident.apartment?.number || "Kh√¥ng r√µ"}</Text>
        </Card.Content>
      </Card>

      {parkingCard ? (
        <Card style={styles.card}>
          <Card.Title title="Th√¥ng tin th·∫ª xe" titleStyle={styles.cardTitle} />
          <Card.Content>
            <View style={styles.infoRow}>
              <Text style={styles.label}>M√£ th·∫ª:</Text>
              <Text style={styles.value}>{parkingCard.card_number}</Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.label}>Lo·∫°i xe:</Text>
              <Text style={styles.value}>
                {parkingCard.vehicle_type === "car" ? "√î t√¥" : "Xe m√°y"}
              </Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.label}>Bi·ªÉn s·ªë:</Text>
              <Text style={styles.value}>
                {parkingCard.license_plate || "Kh√¥ng c√≥"}
              </Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.label}>M√†u xe:</Text>
              <Text style={styles.value}>{parkingCard.color || "Kh√¥ng c√≥"}</Text>
            </View>
          </Card.Content>
        </Card>
      ) : (
        <Card style={styles.card}>
          <Card.Content>
            <Text style={styles.noCardText}>C∆∞ d√¢n ch∆∞a c√≥ th·∫ª xe</Text>
          </Card.Content>
        </Card>
      )}

      {/* {account && (
        <Card style={styles.card}>
          <Card.Title title="T√†i kho·∫£n ng∆∞·ªùi d√πng" />
          <Card.Content>
            <Text>üë§ Username: {account.username}</Text>
            <Text>üìß Email: {account.email || "Kh√¥ng c√≥"}</Text>
            <Text>üõ°Ô∏è Vai tr√≤: {"Ng∆∞·ªùi d√πng th∆∞·ªùng"}</Text>
          </Card.Content>
        </Card>
      )} */}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#fff",
  },
  card: {
    marginBottom: 20,
    borderRadius: 10,
    elevation: 3,
  },
  centered: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorText: {
    color: "red",
    fontSize: 16,
    textAlign: "center",
  },
  cardTitle: {
  fontSize: 18,
  fontWeight: "bold",
  },
  infoRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 8,
  },
  label: {
    fontWeight: "600",
    color: "#555",
  },
  value: {
    fontWeight: "400",
    color: "#000",
  },
  noCardText: {
    textAlign: "center",
    fontStyle: "italic",
    color: "#999",
    paddingVertical: 10,
    fontSize: 16,
  }
});

export default ResidentDetails;
